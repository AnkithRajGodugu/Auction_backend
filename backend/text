mongodb+srv://auctionbase:Hello123@test1.a0kel.mongodb.net/?retryWrites=true&w=majority&appName=test1





useEffect(() => {
        fetchProducts();
      }, []);
    
      const fetchProducts = async () => {
        const response = await fetch("http://localhost:5000/api/products");
        const data = await response.json();
        setProducts(data);
      };
      const handleAddProduct = async (product) => {
        const response = await fetch("http://localhost:5000/api/products", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                },
                body: JSON.stringify(product),
                });
                const data = await response.json();
                setProducts([...products, data]);
                setProduct({});
                setModalOpen(false);
                };
                const handleDeleteProduct = async (id) => {
                    const response = await fetch(`http://localhost:5000/api/products/${id}`, {
                        method: "DELETE",
                        });
                        const data = await response.json();
                        setProducts(products.filter((product) => product._id !== id));
                        };
                        const handleEditProduct = async (product) => {
                            setProduct(product);
                            setModalOpen(true);
                            };
                            const handleUpdateProduct = async (product) => {
                                const response = await fetch(`http://localhost:5000/api/products/${product._id}`,
                                    {
                                        method: "PUT",
                                        headers: {
                                            "Content-Type": "application/json",
                                            },
                                            body: JSON.stringify(product),
                                            });
                                            const data = await response.json();
                                            setProducts(products.map((p) => (p._id === product._id ? product :
                                                p)));
                                                setProduct({});
                                                setModalOpen(false);
                                                };
                                                return (
                                                    <div className="App"></div>


                                                    .......
                                                    const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const path = require('path');
const Product = require('./models/Product');

const app = express();
const port = 5000;

app.use(express.json());
app.use('/uploads', express.static('uploads'));

mongoose.connect('mongodb://localhost:27017/product-page', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('MongoDB connection error:', err));

// Multer setup for image uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});
const upload = multer({ storage });

// Example route: Create a product
app.post('/api/products', upload.single('image'), async (req, res) => {
  try {
    const { name, description, price, startingDate, endingDate, sellerInfo } = req.body;
    const productData = {
      name,
      description,
      price: parseFloat(price), // Convert string to number
      startingDate,
      endingDate,
      sellerInfo: JSON.parse(sellerInfo), // Parse JSON string from frontend
      image: req.file ? `/uploads/${req.file.filename}` : null,
    };
    const product = new Product(productData);
    await product.save();
    res.status(201).json(product);
  } catch (error) {
    res.status(500).json({ message: 'Error creating product', error });
  }
});

// Add other routes (GET, PUT, DELETE) as needed...

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});